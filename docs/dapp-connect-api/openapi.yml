openapi: 3.1.1
info:
  title: Ducky Signer DApp Connect
  version: 0.0.0
  description: API for connecting to Ducky Signer wallet
  license:
    name: GNU AGPLv3
    url: https://www.gnu.org/licenses/agpl.txt
servers:
  - url: http://localhost:1323
  - url: http://127.0.0.1:1323
security:
  - Hawk: []
tags:
  - name: Session
    description: DApp connect session management
  - name: Signing
    description: Signing transactions and signatures
  - name: Authentication Required
    description: Operations that require authentication
  - name: Other
    description: Other useful operations
  - name: All
    description: All operations
paths:
  /:
    get:
      operationId: serverCheck
      summary: Check server
      description: >-
        Check if the server is alive. Authentication is not required. However,
        if the request is authenticated (i.e. a Hawk `Authorization`
        header is included), the connect session used for the authentication is
        checked.
      tags:
        - Other
        - All
      responses:
        200:
          description: The server is on and running
          content:
            application/json:
              example: >+
                OK
          headers:
            Server-Authorization:
              $ref: '#/components/headers/HawkServerAuth'
        401:
          $ref: '#/components/responses/Unauthorized'
          description: >-
            The authentication for the request is invalid. This could be because
            the authentication header is invalid (e.g. improper formatting,
            invalid MAC) or the session used for authentication is invalid (e.g.
            session expired).
        default:
          $ref: '#/components/responses/UnexpectedError'
  /session/init:
    post:
      operationId: sessionInit
      summary: Initialize a new session
      description: |-
        A dApp must establish a connect session with the server and receive a
        session ID to be able to successfully send authenticated requests.
        Establishing a session consists of initializing a new session and then
        confirming that session.

        This operation initializes a new connect session for the dApp with the
        given ID. The server's response to a successful request to initialize a
        session includes a *confirmation token*, a *confirmation code* and a
        *confirmation ID*. The *confirmation ID* will be needed to derive the
        *confirmation shared secret key* that is used to send an authenticated
        request to confirm the session.
      tags:
        - Session
        - All
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Data needed to initialize a new session
              type: object
              required:
                - dapp_id
              properties:
                dapp_id:
                  $ref: '#/components/schemas/Ed25519PublicKey'
                  description: >-
                    The dApp ID, which is the public key of the key pair
                    generated by the dApp. This is used to uniquely identify the
                    dApp or dApp instance. However, single dApp may choose to
                    use a different ID each time it initializes a new session.
      responses:
        200:
          description: >-
            A new session with the wallet has been initialized. The newly
            initialized session must be confirmed to complete the establish of
            the session and be able to send authenticated requests.
          content:
            application/json:
              schema:
                description: >-
                  Session confirmation data needed to confirm an initialized
                  session
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Ed25519PublicKey'
                    description: >-
                      The confirmation ID used to confirm the initialized
                      session. It is the public key of the confirmation key pair
                      generated by the server.
                  code:
                    description: >-
                      The confirmation code needed to be displayed to the user.
                      The user needs to enter this code into the wallet to
                      confirm the session.
                    type: string
                    minLength: 4
                    maxLength: 6
                  token:
                    description: >-
                      The confirmation token that needs to be included in the
                      request to confirm the session
                    type: string
                  exp:
                    description: >-
                      The expiration date-time of confirmation token in
                      [Unix epoch format](https://www.epochconverter.com/). The
                      confirmation token cannot be used after this date-time.
                    type: integer
                    format: int64
          links:
            sessionConfirmToken:
              description: >-
                The confirmation token contains data the server needs to confirm
                the session. This token has a short lifetime (typically 5-10
                minutes) and cannot be used if it is expired.
              operationId: sessionConfirm
              parameters:
                confirm_token: $response.body#/token
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /session/confirm:
    post:
      operationId: sessionConfirm
      summary: Confirm an initialized session
      description: |-
        To complete the establishment of a session, it needs to be confirmed
        after it has been initialized. This requires authenticating using the
        *confirmation ID* and the *confirmation shared secret key*. An
        initialized session can only be confirmed once.

        The user must approve the session within the wallet by entering the
        *confirmation code* that should be presented to them. When the wallet
        asks for the user's approval of the session, it presents the given dApp
        information to the user.
      tags:
        - Session
        - Authentication Required
        - All
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Data needed to confirm the session
              type: object
              required:
                - dapp
              properties:
                confirm_token:
                  description: >-
                    The confirmation token given by the server after completing
                    session initialization
                  type: string
                dapp:
                  description: DApp information
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      description: Name of the dApp
                      type: string
                      maxLength: 128
                    uri:
                      description: URI of the dApp, if applicable
                      type: string
                      format: uri
                      maxLength: 256
                    desc:
                      description: Description of the dApp
                      type: string
                      maxLength: 256
                    icon:
                      description: >-
                        Icon for the dApp, as a JPEG, PNG or SVG data URI
                      type: string
                      format: base64
                      # b64_length = (num_bytes + 2) / 3 * 4
                      # [From: https://stackoverflow.com/a/60067262]
                      #
                      # 4096 bytes -> (4096 + 2) / 3 * 4 = 5464
                      maxLength: 5464
      responses:
        200:
          description: >-
            The session has been confirmed and session establishment is
            complete. Authenticated requests can now be sent using the *session
            shared secret key* derived from the *dApp secret key* (generated by
            the dApp) and the *session ID* (given within this response).
          content:
            application/json:
              schema:
                description: Session data needed to send authenticated requests
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Ed25519PublicKey'
                    description: >-
                      The session ID that can be used to create and send
                      authenticated requests to the server. It is the public key
                      of the session key pair generated by the server.
                  exp:
                    description: >-
                      The expiration date-time of the session in
                      [Unix epoch format](https://www.epochconverter.com/). The
                      session ID and the derived *session shared key* cannot be
                      used after this date-time.
                    type: integer
                    format: int64
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
          description: |-
            The request could not be authenticated. This could be because:
            - The required authentication is not present (i.e. unauthenticated
              request),
            - the authentication header is invalid (e.g. improper formatting,
              invalid MAC),
            - the confirmation token is invalid (e.g. token expired),
            - or the confirmation token has been used before
        403:
          $ref: '#/components/responses/Forbidden'
          description: User denied approval for confirming the session
        408:
          $ref: '#/components/responses/RequestTimeout'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /transaction/sign:
    post:
      operationId: txnSign
      summary: Sign a single transaction
      description: >-
        Sign only one transaction. Signing a transaction requires user approval.
        If the user does not approve the transaction, the transaction signing
        fails.
      tags:
        - Signing
        - Authentication Required
        - All
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionSignRequest'
      responses:
        200:
          description: Transaction successfully signed
          content:
            application/json:
              schema:
                description: Signed transaction data
                required:
                  - signed_transaction
                type: object
                properties:
                  signed_transaction:
                    description: Signed transaction data
                    type: string
                    format: base64
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
          description: Failed to sign transaction
        408:
          $ref: '#/components/responses/RequestTimeout'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /multisig/sign/:
    post:
      operationId: multisigSign
      summary: Sign a single multisignature transaction
      description: >-
        Sign only one multisignature transaction. Signing the transaction
        requires user approval at least once. If the user has multiple accounts
        that can sign the transaction, they may be asked to approve the
        transaction multiple times. If the user does approve the transaction at
        least once, the transaction signing fails.
      tags:
        - Signing
        - Authentication Required
        - All
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultisigSignRequest'
        required: true
      responses:
        200:
          description: Success full signed multisig transaction
          content:
            application/json:
              schema:
                required:
                  - multisig
                type: object
                properties:
                  multisig:
                    description: >-
                      The multisignature data after adding signature by signing
                      transaction
                    format: base64
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
          description: Mulitsig signing failed
        408:
          $ref: '#/components/responses/RequestTimeout'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  schemas:
    ApiError:
      description: An error message
      type: object
      properties:
        name:
          description: Error name
          type: string
        message:
          description: Error message
          type: string
    Ed25519PublicKey:
      description: Ed25519 public key
      type: string
      format: base64
      # b64_length = (num_bytes + 2) / 3 * 4
      # [From: https://stackoverflow.com/a/60067262]
      #
      # 32 bytes -> (32 + 2) / 3 * 4 = 44
      minLength: 44
      maxLength: 44
    TransactionSignRequest:
      type: object
      required:
        - transaction
      properties:
        transaction:
          type: string
          format: base64
          description: >-
            Msgpack encoding of a single algod `Transaction` object
        public_key:
          $ref: '#/components/schemas/Ed25519PublicKey'
          description: >-
            Overrides the default account used to sign the transaction. The
            default account used to sign the transaction is the authorized
            account of the sender of the transaction.
    MultisigSignRequest:
      description: Data needed to sign a single multisignature transaction
      required:
        - transaction
        - public_key
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionSignRequest'
        - type: object
          properties:
            partial_multisig:
              description: >-
                Partially signed multisig transaction signature of the passed
                transaction, if adding a signature to an existing partial and
                not creating a new partial
              required:
                - Subsigs
                - Threshold
                - Version
              type: object
              properties:
                Subsigs:
                  description: >-
                    Collection of signatures. The order in which these
                    signatures are placed in the array matter.
                  type: array
                  items:
                    description: >-
                      Holds a pair of public key and signatures signatures may
                      be empty
                    required:
                      - Key
                      - Sig
                    type: object
                    properties:
                      Key:
                        $ref: '#/components/schemas/Ed25519PublicKey'
                        description: >-
                          Public key of the account that the signature belongs
                          to
                      Sig:
                        description: >-
                          Signature of transaction for an account in a multisig
                        type: array
                        items:
                          format: int8
                          type: integer
                Threshold:
                  format: int8
                  description: >-
                    Number of signatures required to authorize the transaction
                  minimum: 1
                  type: integer
                Version:
                  format: int8
                  description: >-
                    The version of the protocol used to create the multisig.
                    There is currently only version 1.
                  default: 1
                  type: integer
            signer:
              $ref: '#/components/schemas/Ed25519PublicKey'
              description: >-
                Overrides the default multisig account used to sign the
                transaction. The default account used is the authorized account
                of the multisig sender of the transaction.
  responses:
    BadRequest:
      description: Invalid data sent in the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      headers:
        Server-Authorization:
          $ref: '#/components/headers/HawkServerAuth'
    Forbidden:
      description: Not allowed to do operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      headers:
        Server-Authorization:
          $ref: '#/components/headers/HawkServerAuth'
    RequestTimeout:
      description: User did not respond in time
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      headers:
        Server-Authorization:
          $ref: '#/components/headers/HawkServerAuth'
    Unauthorized:
      description: |-
        The request authentication is invalid. This could be because:
        - The required authentication is not present (i.e. unauthenticated
          request),
        - the authentication header is invalid (e.g. improper formatting,
          invalid MAC),
        - or the session used for authentication is invalid (e.g. session
          expired)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    UnexpectedError:
      description: An unexpected error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      headers:
        Server-Authorization:
          $ref: '#/components/headers/HawkServerAuth'
  headers:
    HawkServerAuth:
      description: >-
        The Hawk authentication header included in the response whenever the
        server receives an authenticated request. This header allows for a dApp
        to authenticate the server response it receives.
      schema:
        type: string
        example: >-
          Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=",
          hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=",
          ext="response-specific"
  securitySchemes:
    Hawk:
      description: |-
        Generating a [Hawk](https://github.com/mozilla/hawk/blob/main/API.md)
        `Authorization` header requires an `id`, a `key` and an `algorithm`.
        - The `id` is the *session ID* when a session has been established and
          the *confirmation ID* when confirming an initialized session. It must
          be a Base64-encoded string (with padding).
        - The `key` is the derived *session shared secret key* when a session
          has been established and the *confirmation shared secret key* when
          confirming an initialized session. It must be a Base64-encoded string
          (with padding).
        - The `algorithm` will always be `sha256`.
      type: apiKey
      name: Authorization
      in: header


# Useful references:
#
# - Swagger Editor: https://editor-next.swagger.io/
# - OpenAPI Specification (v3.1.1): https://swagger.io/specification/
# - OpenAPI Guide (v3.0): https://swagger.io/docs/specification/v3_0/about/
# - YAML Multiline Strings: https://yaml-multiline.info/
