package session_test

import (
	"crypto/ecdh"
	"crypto/rand"
	"encoding/base64"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	. "duckysigner/internal/dapp_connect"
	. "duckysigner/internal/dapp_connect/session"
	"duckysigner/internal/testing/mocks"
)

var _ = Describe("DApp Connect Session Manager", func() {
	Describe("NewSession()", func() {
		It("generates a new session", func() {
			// Mock session key pair to be generated by also mocking the ECDH curve
			mockSessionKey := "OA7vIBYGze5Vapw/qO3iPr+F9nRnaxsWSVnViTEZ1Ag="
			mockCurve := &mocks.EcdhCurveMock{GeneratedPrivateKey: mockSessionKey}
			mockSessionKeyBytes, err := base64.StdEncoding.DecodeString(mockSessionKey)
			Expect(err).ToNot(HaveOccurred())
			mockSk, err := mockCurve.NewPrivateKey(mockSessionKeyBytes)
			Expect(err).ToNot(HaveOccurred())

			By("Generating a dApp key pair (dApp ID & key)")
			dappKey, err := ecdh.X25519().GenerateKey(rand.Reader)
			Expect(err).ToNot(HaveOccurred())
			dappId := dappKey.PublicKey()

			By("Running NewSession()")
			sessionManager := Manager{}
			newSession, err := sessionManager.GenerateSession(dappId, &DappData{}, mockCurve)

			By("Checking the newly created session")
			Expect(newSession.ID()).To(Equal(mockSk.PublicKey()))
			Expect(newSession.Key()).To(Equal(mockSk))
			// TODO: Complete this
			// Expect(newSession.Expiration()).To(Equal())
			Expect(newSession.DappId()).To(Equal(dappId))
		})
	})

	PDescribe("GetSession()", func() {
		It("gets the session with the given ID if it exists", func() {
			// TODO: Complete this
		})

		It("fails when attempting to get a session that does not exist", func() {
			// TODO: Complete this
		})
	})

	PDescribe("GetAllSessions()", func() {
		It("gets all sessions if there are one or more stored sessions", func() {
			// TODO: Complete this
		})

		It("returns an empty slice if there are no stored sessions", func() {
			// TODO: Complete this
		})
	})

	PDescribe("StoreSession()", func() {
		It("stores a valid and unexpired session", func() {
			// TODO: Complete this
		})

		It("stores an expired session", func() {
			// TODO: Complete this
		})

		It("fails to store a session without a session ID", func() {
			// TODO: Complete this
		})

		It("fails to store a session without a session key", func() {
			// TODO: Complete this
		})

		It("fails to store a session without a dApp ID", func() {
			// TODO: Complete this
		})
	})

	PDescribe("RemoveSession()", func() {
		It("removes the session with the given ID if it exists", func() {
			// TODO: Complete this
		})

		It("fails when attempting to remove a session that does not exist", func() {
			// TODO: Complete this
		})
	})

	PDescribe("PurgeAllSessions()", func() {
		It("removes all sessions if there are one or more stored sessions", func() {
			// TODO: Complete this
		})

		It("does not fail when attempting to purge all sessions and there are no stored sessions", func() {
			// TODO: Complete this
		})
	})

	PDescribe("PurgeInvalidSessions()", func() {
		It("removes all invalid stored sessions", func() {
			// TODO: Complete this
		})

		It("does not fail when attempting to purge invalid sessions and there are no invalid stored sessions", func() {
			// TODO: Complete this
		})

		It("does not fail when attempting to purge invalid sessions and there are no stored sessions", func() {
			// TODO: Complete this
		})
	})

	PDescribe("StoreConfirmation()", func() {
		It("stores a valid and unexpired confirmation", func() {
			// TODO: Complete this
		})

		It("stores an expired confirmation", func() {
			// TODO: Complete this
		})

		It("fails to store a confirmation without a confirmation ID", func() {
			// TODO: Complete this
		})

		It("fails to store a confirmation without a confirmation key", func() {
			// TODO: Complete this
		})
	})

	PDescribe("PurgeAllConfirmations()", func() {
		It("removes all confirmations if there are one or more stored confirmations", func() {
			// TODO: Complete this
		})

		It("does not fail when attempting to purge all confirmations and there are no stored confirmations", func() {
			// TODO: Complete this
		})
	})
})
