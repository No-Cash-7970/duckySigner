{"pageProps":{"projectName":"duckySigner","currentAdr":{"slug":"20250621-use-paseto-for-security-tokens","package":null,"title":"Use PASETO for Security Tokens","status":"accepted","supersededBy":null,"tags":["dapp-connect","security","backend"],"deciders":["No-Cash-7970"],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nThe <AdrLink slug=\"20250619-dapp-connect-protocol\" status=\"accepted\" title=\"DApp Connect Protocol\" customLabel=\"DApp connect protocol\" /> requires the server to issue security tokens to dApps. Each dApp eventually presents their token to the server. The tokens need to be in a format that enables the dApp connect protocol to be secure when the token is transferred over an insecure localhost connection.\n\n## Decision Drivers\n\n- **Security:** The token format should not be able to be cracked by any entity besides the issuer of the token (usually the server), thus making it safe to use on <AdrLink slug=\"20240102-use-local-server-to-connect-to-dapps\" status=\"accepted\" title=\"Use Local Server to Connect to DApps\" customLabel=\"localhost, where there is no SSL/TLS\" />\n- **Library in Go:** The security token must be able to be easily created in Go, the language used for the server. The library for the security token format must be maintained and up-to-date.\n- **Library in JavaScript/TypeScript and other languages:** Although it is unlikely that dApps will need to create their own security tokens, allow for it to be a possibility. DApps could be built in a variety of languages.\n\n## Considered Options\n\n- PASETO\n- JWT\n\n## Decision Outcome\n\nChose PASETO. It is easier to use because it requires less effort to use it securely and transmit it safely through localhost without SSL/TLS.\n\n**Confidence:** Medium. Both the server and dApps should be able to handle PASETOs. However, PASETO is relatively unknown in the web development world.\n\n## Pros and Cons of the Options\n\n### PASETO\n\n[PASETO (Platform-Agnostic SEcurity TOkens)](https://paseto.io/) (pronunciation: pah-SEH-toh) is a newer security token format that was created in 2018 as a [more secure replacement for JWT](https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc).\n\n- Pro: Less error-prone, which makes it easier to use securely\n- Pro: Most of the libraries implement PASETO consistently because of how strict it is\n- Con: Tooling and literature for PASETO is limited because it is newer and less common\n\n### JWT\n\n[JWT (JSON Web Token)](https://jwt.io/introduction) (pronounced like \"jot\") has been around since 2010 and is often used for [OAuth 2.0](https://oauth.net/2/).\n\n- Pro: The popularity of JWT means that there are plenty of tools and literature for JWT, which makes it easier to find help regarding JWT\n- Con: Transmitting JWT without SSL/TLS is [not recommended](https://snyk.io/blog/top-3-security-best-practices-for-handling-jwts/), which makes it difficult to use securely on localhost\n- Con: The overwhelming number of options for JWT make it difficult to use. JWT's level of security can vary greatly depending on the library that is used to create a token.\n\n## Links\n\n- Refines <AdrLink slug=\"20250619-dapp-connect-protocol\" status=\"accepted\" title=\"DApp Connect Protocol\" customLabel=\"DApp Connect Protocol\" />\n- Relates to <AdrLink slug=\"20250621-vocab-for-dapp-connect\" status=\"accepted\" title=\"Vocabulary for DApp Connect\" customLabel=\"Vocabulary for DApp Connect\" />\n- [Platform-Agnostic SEcurity TOkens (PASETO)](https://paseto.io/)\n- [A Thorough Introduction to PASETO - Okta Developer](https://developer.okta.com/blog/2019/10/17/a-thorough-introduction-to-paseto)\n- [Paseto is a Secure Alternative to the JOSE Standards (JWT, etc.) - Paragon Initiative](https://paragonie.com/blog/2018/03/paseto-platform-agnostic-security-tokens-is-secure-alternative-jose-standards-jwt-etc)\n- [JSON Web Token (JWT)](https://jwt.io/introduction)\n- [No Way, JOSE! Javascript Object Signing and Encryption is a Bad Standard That Everyone Should Avoid - Paragon Initiative](https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid)\n- [Top 3 security best practices for handling JWTs - Snyk](https://snyk.io/blog/top-3-security-best-practices-for-handling-jwts/)\n- [Attacking and Securing JWT - OWASP (PDF)](https://owasp.org/www-chapter-vancouver/assets/presentations/2020-01_Attacking_and_Securing_JWT.pdf)\n"},"creationDate":"2025-06-21T22:38:32.000Z","lastEditDate":"2025-06-30T20:32:02.000Z","lastEditAuthor":"No-Cash-7970","publicationDate":"2025-07-01T06:59:59.000Z","file":{"relativePath":"docs/decisions/20250621-use-paseto-for-security-tokens.md","absolutePath":"/home/runner/work/duckySigner/duckySigner/docs/decisions/20250621-use-paseto-for-security-tokens.md"},"repository":{"provider":"github","viewUrl":"https://github.com/No-Cash-7970/duckySigner/blob/master/docs/decisions/20250621-use-paseto-for-security-tokens.md"}},"l4bVersion":"1.1.0"},"__N_SSG":true}